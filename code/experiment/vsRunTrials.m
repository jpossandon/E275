function run = vsRunTrials(run)
% run = vsRunTrials(run) called by experiment.m executes the visual search
% trials of the DBS neglect PD experiment.
% During trials, the researcher may press ESCAPE to "restart" the current
% trial, or quit/return from the experiment prematurely (run can be saved).
% Upon a restart request, the current trial is randomly swapped with any
% remaining ("unseen") trial, so the number of trials remains constant.
%
% INPUT
%    run - struct, as generated by experiment.m
%
% OUTPUT
%    run, extended by vsTrials, containing stimuli descriptions and results
%
% Created 01/2013 by Johannes Keyser (jkeyser@uos.de)
%
% TODO: understand keyboard buffering (trials may end prematurely if
%       fooling around with keyboard [by multiple key presses @wrong time])

%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.

DrawFormattedText(run.win.hndl, ['Aufgabenteil visuelle Suche\n\n'...
	'Gleich werden Ihnen einfache Bilder von Kreisen pr�sentiert. '...
	'Wir bitten Sie, denjenigen Kreis ohne Strich zu finden.\n'...
	'Bitte dr�cken Sie eine Taste, sofort nachdem Sie diesen "echten" '...
	'Kreis erblickt haben!\n' ...
    'Auch ohne Dr�cken wird das Bild nach einer Weile verschwinden.\n\n'...
	'Zwischen den Bildern (und am Anfang) wird ein Punkt erscheinen. '...
	'Wie gewohnt schauen Sie diesen bitte genau an und verfolgen ihn, '...
	'bis das n�chste Bild erscheint.\n\n'],...
	'center','center',255,55);
Screen('Flip', run.win.hndl);
disp('Showing the VISUAL SEARCH instructions [check understanding].')
waitForKBkeys({'space'});

if run.Iteration == 0, Nreps = 1; else Nreps = 3; end % training: 36 trials
run.vsTrials = vsCreateTrials(run.DynDurVS, Nreps);
Ntrials = length(run.vsTrials);
tt = 1; % gets reset if a trial is repeated/swapped
ut = 1; % ALWAYS increases (-> unique trial ID for EDF file, TRIALID msg)
while tt <= Ntrials
	ListenChar(2) % disable MATLAB windows' keyboard listening
	% wait for release of still ongoing presses on keyboard or response box
	releaseWait = false;
	if KbCheck() || Eyelink('ButtonStates') % tell researcher what's up
		fprintf(2,'Waiting for release of keyboard/buttons...');
		releaseWait = true; % needed to print newline after waiting
	end
	while KbCheck() || Eyelink('ButtonStates'), end % actually wait
	if releaseWait, fprintf('OK!\n'), end % mainly print newline
	% log time of trial's start
	run.vsTrials(tt).clockS = now();
	doRestart = false; % (re)set the restart request for current/new trial
	fprintf('Starting trial %d/%d...', tt, Ntrials)
	if run.DoDummyMode % without eyetracker, show driftcorr dot for a while
		% calibration target is visually the same as drift correction dot
		EyelinkDrawCalTarget(run.el, run.win.cntr(1), run.win.cntr(2));
		WaitSecs(1+rand());% simulate timing variance like drift correction
	else % if actual Eyetracker is used, do (manual) drift checking; set
		% error 'drift_correction_rpt_error = 1.5' in setup_eyetracker.m
		% TODO: check settings: why is it "manual confirmation"?
		EyelinkDoDriftCorrection(run.el);
	end
	% TRIALID after driftcheck; avoids button-release event from prev trial
	Eyelink('Message','TRIALID %d', ut); % UNIQUE in EDF!
	Eyelink('Command','record_status_message ''TRIAL %d''',tt);
	Eyelink('Message','TARGETINDEX %d', run.vsTrials(tt).stimulus.tgtIndx);
	% show search array on EyeLink Host (and *create* it for Display PC)
	posVec = vsCreateStimulus(run.vsTrials(tt).stimulus.posGrid, ...
		run.scr, run.win.hndl, true);
	run.vsTrials(tt).stimulus.posvec = posVec; % log position vectors
	% ELPG 15.7 Starting Recording
	% Introduce a 100 millisecond delay after recording begins, to ensure
	% that no data is missed before the important part of the trial starts.
	% The EyeLink requires 10 to 30 milliseconds after the recording
	% command to begin writing data. This extra data also allows for the
	% detection of blinks or saccades just before the trial start, allowing
	% bad trials to be discarded in saccadic RT analysis.
	% A SYNCTIME message later in the trial marks the actual zero-time in
	% the trial's data record.
	if Eyelink('StartRecording'), fprintf(2,'StartRecording failed!'); end
	Eyelink('WaitForModeReady', 100); % make sure mode switching is ok
	% *show* search array on Stimulus PC
	[VBLTimestamp,StimOnset] = Screen('Flip', run.win.hndl); %#ok<ASGLU>
	Eyelink('Message', 'SYNCTIME');
	while true % wait; record (imprecise) reaction time; deal with ESCAPE
		% check keyboard+get timestamp of this check (even w/o key pressed)
		[keyIsDown,lastCheckTime,kCode] = KbCheck();
		% a response box connected via EyeLink can confirm target detection
		% also, pressing any key (~ESC) can confirm detection (w/o Eyelink)
		if Eyelink('ButtonStates') || keyIsDown % TODO: use EyeLink-events?
			if kCode(KbName('Escape')) % offer QUIT/RESTART TRIAL options
				Eyelink('Message', 'TRIAL ABORT');
				informAboutESC() % inform subject & researcher on ESC press
				while true % ensure reply is either "q" or "r"
					rpl=input('[Q]uit experiment or [R]estart trial?','s');
					if strcmpi(rpl,'q') || strcmpi(rpl,'r'), break, end
				end
				if strcmpi(rpl,'q')
					fprintf(2,'Quitting VISUAL SEARCH!\n');
					vsCleanUp()
					return % from entire function (to caller)
				elseif strcmpi(rpl,'r')
					doRestart = true; %cannot break for-loop here->set flag
					break % the "while true" loop
				end
				% TODO: elseif ArrowKey; fetch adjustment of duration from svn
			else % response box press, or key was not ESCAPE or L/R ARROW
				% TODO: compare this RT with EDF file (ms precision)
				run.vsTrials(tt).RT = lastCheckTime - StimOnset;
				Eyelink('Message', 'TRIAL OK');
				break % the "while true" loop
			end
		end
		% abort trial if its duration is exceeded
		if lastCheckTime > StimOnset+run.vsTrials(tt).duration
			run.vsTrials(tt).RT = inf;
			Eyelink('Message', 'TRIAL OK');
			break % the "while true" loop
		end
	end
	run.vsTrials(tt).duration = GetSecs()-StimOnset; % log "core" duration
	vsCleanUp()
	doTrialSummary() % give some overview of this and previous trials
	run.vsTrials(tt).clockE = now();  % log time of trial's end, incl setup
	if doRestart % a re-run was requested after trial was aborted
		run = prepareRestart(run); % swap current trial with an unseen one
		tt = tt -1; % decrement index for new iteration with same value
	end
	tt = tt +1; % increment index for iteration of next trial
	ut = ut +1; % increment unique trial index for EDF logging
end
fprintf('Quitting VISUAL SEARCH.\n');

    function doTrialSummary()
        isvalid = @(rt) ~isnan(rt) & rt < Inf;
        vldIdx  = isvalid([run.vsTrials(:).RT]); % all responded trials
        mssIdx  = [run.vsTrials(1:tt).RT]==Inf;  % missed trials so far
        fprintf('RT=%.2fs [M=%.2fs, SD=%.2fs, %d missed (%.0f%%)].\n', ...
                run.vsTrials(tt).RT, ...
                mean([run.vsTrials(vldIdx).RT]), ...
                std([run.vsTrials(vldIdx).RT]), ...
                sum(mssIdx), sum(mssIdx)/tt*100);
       if run.Iteration == 0 % during training, report the 75% percentile
           fprintf('75 percentile: %.3fs.\n', ...
                   prctile([run.vsTrials(vldIdx).RT], 75));
       end
    end
    function run = prepareRestart(run)
        %%% handles the trial restart request in a sensible way
        % In case of an aborted trial (by researcher's intervention with
        % ESCAPE and then choosing to "restart" the trial), showing the
        % SAME target position is a bad choice.
        % Thus, a randomly selected trial from the remaining list is
        % swapped with the current unfinished trial's position in the list!
        % That this happened can later simply seen by inspecting the trial
        % numbers (but telling which went were is impossible with >1 swap).
        if tt == Ntrials, disp('Last trial cannot be swapped.'), return,end
        swpIdx = tt +randi(Ntrials-tt); % select idx from remaining trials
        swpTrl = run.vsTrials(swpIdx);  % copy trial struct to temp var
        run.vsTrials(swpIdx) = run.vsTrials(tt); % replace w/ current trial
        run.vsTrials(tt) = swpTrl; % and copy temp var to current trial
        fprintf('Swapped trial %d for current trial %d.\n', swpIdx, tt)
    end

    function informAboutESC()
        %%% handles the researcher's pressing ESCAPE during a trial
        % show what's up on Display PC (what subject is watching)
        Screen('FillRect', run.win.hndl, run.scr.Bcolor);
        DrawFormattedText(run.win.hndl, ...
            ['Das Experiment wird kurz angehalten.\nBitte haben Sie'...
            ' einen Augenblick Geduld.\n'],'center','center',255,55);
        Screen('Flip', run.win.hndl);
        % also inform researcher on console
        fprintf(2,'\nExperiment halted; Explain to subject!\n');
        ListenChar(1) % enable keyboard-listen to MATLAB Command Window
    end

    function vsCleanUp()
        %%% handles the cleanup after a vs-trial
        Eyelink('Message', 'TRIAL END');
        Eyelink('StopRecording');% stop logging to EDF file (but keep open)
        Screen('FillRect', run.win.hndl, run.scr.Bcolor);
        Screen('Flip', run.win.hndl); % clear screen of Display PC
        Eyelink('WaitForModeReady', 100); % make sure mode switching is ok
        Eyelink('SetOfflineMode'); % Offline Mode needed for screen drawing
        Eyelink('Command', 'clear_screen 0');% % clear Host PC (0==black)
    end
end